{"version":3,"sources":["Todos/Todo.js","Todos/Todos.js","AddTask/AddTask.js","Header/Header.js","App.js","serviceWorker.js","index.js"],"names":["Todo","styleName","props","todo","completed","className","this","type","onChange","jobDone","bind","id","title","onClick","deleteTask","Component","Todos","todos","map","key","AddTask","state","newNameHandler","event","setState","target","value","onSubmit","preventDefault","placeholder","newTaskHandler","Header","App","newState","axios","delete","then","res","filter","s","post","data","get","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"2TAEqBA,G,iNACjBC,UAAU,WACN,OAAG,EAAKC,MAAMC,KAAKC,UACR,WAGA,Q,wEAKX,OACI,yBAAKC,UAAWC,KAAKL,aACrB,2BAAOM,KAAK,WAAWC,SAAUF,KAAKJ,MAAMO,QAAQC,KAAKJ,KAAKA,KAAKJ,MAAMC,KAAKQ,MAC7E,2BAAIL,KAAKJ,MAAMC,KAAKS,OACpB,4BAAQP,UAAU,SAASQ,QAASP,KAAKJ,MAAMY,WAAWJ,KAAKJ,KAAKA,KAAKJ,MAAMC,KAAKQ,KAApF,U,GAfqBI,cCAbC,E,iLACP,IAAD,OACL,OAGAV,KAAKJ,MAAMe,MAAMC,KAAI,SAACf,GAAD,OAChB,kBAAC,EAAD,CAAMgB,IAAKhB,EAAKQ,GAAIR,KAAMA,EAAMW,WAAY,EAAKZ,MAAMY,WAAYL,QAAS,EAAKP,MAAMO,iB,GANjEM,aCCdK,G,iNACjBC,MAAM,CACFT,MAAM,GAENR,WAAU,G,EAGdkB,eAAe,SAACC,GACZ,EAAKC,SAAS,CAACZ,MAAOW,EAAME,OAAOC,S,EAGvCC,SAAS,SAACJ,GACNA,EAAMK,kB,wEAGN,OAEE,0BAAMvB,UAAU,aAAasB,SAAUrB,KAAKqB,UACxC,2BAAOpB,KAAK,OAAOsB,YAAY,uBAAuBrB,SAAUF,KAAKgB,iBACrE,4BAAQjB,UAAU,aAAaQ,QAASP,KAAKJ,MAAM4B,eAAepB,KAAKJ,KAAKA,KAAKe,QAAjF,c,GAnBuBN,c,sBCDtB,SAASgB,IACpB,OACI,gCACI,gD,ICCSC,E,2MAEnBX,MAAM,CACJJ,MAAM,I,EAORR,QAAQ,SAACE,GACR,IACMsB,EADc,YAAI,EAAKZ,MAAMJ,OACNC,KAAI,SAACf,GAIhC,OAHGA,EAAKQ,KAAKA,IACXR,EAAKC,WAAWD,EAAKC,WAEhBD,KAEV,EAAKqB,SAAS,CAACP,MAAOgB,K,EAEtBnB,WAAW,SAACH,GACRuB,IAAMC,OAAN,qDAA2DxB,IAC5DyB,MAAK,SAAAC,GAAG,OAAE,EAAKb,SAAS,CAACP,MAAM,EAAKI,MAAMJ,MAAMqB,QAAO,SAAAnC,GACtD,GAAGA,EAAKQ,KAAKA,EACX,OAAOR,W,EAKf2B,eAAe,SAACS,GACdL,IAAMM,KAAK,6CAA6CD,GACvDH,MAAK,SAAAC,GAAG,OAAE,EAAKb,SAAS,CAACP,MAAM,GAAD,mBAAK,EAAKI,MAAMJ,OAAhB,CAAsBoB,EAAII,a,mFAzBrC,IAAD,OACjBP,IAAMQ,IAAI,wDACTN,MAAK,SAAAC,GAAG,OAAG,EAAKb,SAAS,CAACP,MAAMoB,EAAII,Y,+BA4BrC,OACE,6BACE,kBAAC,EAAD,MACC,kBAAC,EAAD,CAASX,eAAgBxB,KAAKwB,iBAC/B,kBAAC,EAAD,CAAOb,MAAOX,KAAKe,MAAMJ,MAAOH,WAAYR,KAAKQ,WAAYL,QAASH,KAAKG,e,GAxClDM,aCMb4B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBlB,MAAK,SAAAmB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.1acd4b06.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport './Todo.css'\r\nexport default class Todo extends Component {\r\n    styleName=()=>{\r\n        if(this.props.todo.completed){\r\n            return 'TodoTrue'\r\n        }\r\n        else{\r\n            return 'Todo'\r\n        }\r\n    }\r\n    render() {\r\n      \r\n        return (\r\n            <div className={this.styleName()}>\r\n            <input type=\"checkbox\" onChange={this.props.jobDone.bind(this,this.props.todo.id)}></input>\r\n             <p>{this.props.todo.title}</p>\r\n             <button className=\"Delete\" onClick={this.props.deleteTask.bind(this,this.props.todo.id)}>X</button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport Todo from './Todo'\r\nexport default class Todos extends Component {\r\n    render() {\r\n        return (\r\n           \r\n                 \r\n        this.props.todos.map((todo)=>(\r\n             <Todo key={todo.id} todo={todo} deleteTask={this.props.deleteTask} jobDone={this.props.jobDone}/>\r\n        ))\r\n       \r\n    )\r\n        \r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport './AddTask.css'\r\n\r\nexport default class AddTask extends Component {\r\n    state={\r\n        title:'',\r\n        // id:Math.floor(Math.random()*100),\r\n        completed:false\r\n    }\r\n\r\n    newNameHandler=(event)=>{\r\n        this.setState({title: event.target.value});\r\n        // this.setState({id:Math.floor(Math.random()*100)})\r\n    }\r\n    onSubmit=(event)=>{\r\n        event.preventDefault();\r\n    }\r\n    render() {\r\n        return (\r\n            \r\n          <form className=\"DodajForma\" onSubmit={this.onSubmit}>\r\n              <input type=\"text\" placeholder=\"Unesite novi zadatak\" onChange={this.newNameHandler}></input>\r\n              <button className=\"DodajDugme\" onClick={this.props.newTaskHandler.bind(this,this.state)}>Dodaj</button>\r\n          </form>\r\n          \r\n        )\r\n    }\r\n}\r\n","import React from 'react'\r\nimport './Header.css'\r\nexport default function Header() {\r\n    return (\r\n        <header>\r\n            <h1>Todo aplikacija</h1>\r\n\r\n        </header>\r\n    )\r\n}\r\n","import React, { Component } from 'react'\nimport Todos from './Todos/Todos'\nimport AddTask from './AddTask/AddTask'\nimport axios from 'axios'\nimport Header from './Header/Header'\n\nexport default class App extends Component {\n \n  state={\n    todos:[],\n    \n  }\n  componentDidMount(){\n    axios.get('https://jsonplaceholder.typicode.com/todos?_limit=10')\n    .then(res=> this.setState({todos:res.data}));\n  }\n  jobDone=(id)=>{\n   const oldStateTodos=[...this.state.todos];\n   const newState=oldStateTodos.map((todo)=>{\n     if(todo.id===id){\n       todo.completed=!todo.completed;\n     }\n     return todo\n    });\n  this.setState({todos: newState});\n  }\n  deleteTask=(id)=>{\n      axios.delete(`https://jsonplaceholder.typicode.com/todos/${id}`)\n    .then(res=>this.setState({todos:this.state.todos.filter(todo=>{\n      if(todo.id!==id){\n        return todo\n      }\n    })}))\n    \n  }\nnewTaskHandler=(s)=>{\n  axios.post('https://jsonplaceholder.typicode.com/todos',s)\n  .then(res=>this.setState({todos:[...this.state.todos,res.data]}))\n  \n}\n  render() {\n  \n    return (\n      <div>\n        <Header/>\n         <AddTask newTaskHandler={this.newTaskHandler}/>\n        <Todos todos={this.state.todos} deleteTask={this.deleteTask} jobDone={this.jobDone}/>\n       \n      </div>\n    )\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}